SUMMARY

####################################### Team Members ##########################################

The following (<Name> - <Student Id>) are the members of the team:

Rajnita Leichombam - 1370432160
Vaishnav Sai Krishna Addagulla - 7845693237
Karishma Pherwani - 9189701934


##################################### Tasks Ownership ##########################################

Task 1:  Create Github Repo, Preparing Skeleton and Structure of the Project - Rajnita Leichombam
Task 2:  File Handling Implementation- Reading & Writing to Files - Rajnita Leichombam 
Task 3:  Generation of Input Strings - Vaishnav Sai Krishna Addagulla
Task 4:  Basic Algorithm Implementation (Finding min cost using 2D memoization table) - Rajnita Leichombam
Task 5:  Basic Algorithm (Backtracking Logic to generate sequences from memoization Table) - Vaishnav Sai Krishna Addagulla
Task 6:  Efficient Algorithm Implementation(Finding min cost and generation of outputsequences) - Karishma Pherwani
Task 7:  Preparation of Summary.txt - Rajnita Leichombam, Karishma Pherwani
Task 8:  Report - Summary.txt Review - Karishma Pherwani, Vaishnav Sai Krishna Addagulla
Task 9:  Code Review of the project - Karishma Pherwani, Vaishnav Sai Krishna Addagulla, Rajnita Leichombam
Task 10: Test Plan and Cases preparation (listing test cases, edge cases, etc) - Vaishnav Sai Krishna Addagulla
Task 11: Plotting of graphs using MS Excel - Vaishnav Sai Krishna Addagulla
Task 12: Collection of data points for plotting - Rajnita Leichombam
Task 13: Adding Shell Scripts - Rajnita Leichombam
Task 14: Time and memory calculation in Java - Rajnita Leichombam
Task 15: Reading and posting questions using Communication channels (Piazza) - Vaishnav Sai Krishna Addagulla


###################################### INSIGHTS & OBSERVATIONS ##################################

************** BASIC ALGORITHM (Sequence Alignment)***************

Recurrence relation used: 
The minimum alignment costs satisfy the following recurrence for i ≥ 1 and j ≥ 1:
OPT(i,j)=min[αxiyj +OPT(i−1,j−1),δ+OPT(i−1,j),δ+OPT(i,j−1)].

For'm' as the length of the first generated input string and 'n' as the length of the second generated input String we have 
time complexity as O(mn) ,
space complxity as O(mn) as we have a 2-D array (memoization table).
To reconstruct the solution, we trace back from the corner of the memoization table i.e. memoization[m][n]. Depending on how the cell is filled i.e. which of the three values as specified in the above recurrence relation is used.


Observation 1. The length of a shortest path that uses (i, j) is f (i, j) + g(i, j).
Observation 2. let q be an index that minimizes f (q, n/2) + g(q, n/2). Then, there exists a shortest path from (0, 0) to (m, n) that uses (q, n/2).

***************EFFICIENT ALGORITHM (Using Divide and Conquer)**************

Idea: a divide-and-conquer algorithm to compute half alignments
For the efficient algorithm we need O(N) for storing the computation arrays or the global list and O(N+M) to store the optimal alignment.

Given 2 strings X and Y, we can, in linear space and O(nm) time, we compute the cost of aligning...
• every prefix of X with Y
• X with every prefix of Y
• a particular prefix of X with every prefix of Y
• a particular suffix of X with every suffix of Y

Define:
• AllYPrefixCosts(x, i, y) = returns an array of the scores of optimal alignments between x[1..i] and all prefixes of Y.
• AllYSuffixCosts(x, i, y) = returns an array of the scores of optimal alignments between x[i..n] and all suffixes of y


def Align(x, y):
n := |x|; m := |y|
if n or m ≤ 2: use standard alignment and return alignment

YPrefix := AllYPrefixCosts(x, n/2, y)
YSuffix := AllYSuffixCosts(x, n/2+1, y)

for q := 0..m:
cost = YPrefix[q] + YSuffix[q+1]
if cost < best: bestq = q; best = cost

midCharCost = YPrefix[1][bestq];
gapCharCost = YPrefix[0][bestq];

if midCharCost == (gapCharCost + penalty)
    Align(x[1..n/2], y[1..bestq+1])
    Align(x[n/2+1..n], y[bestq+1..m])
    return alignment
else
    Align(x[1..n/2], y[1..bestq])
    Align(x[n/2+1..n], y[bestq+1..m])
    return alignment


**********COMPARISONS BETWEEN THE TWO ALGORITHMS*********

 In the basic algorithm, we can see that OPT(i,j) relies only on rows i,i-1 and columns j,j-1. We only need to track the current row and previous row in memory. This will allow us to obtain value of OPT(i,j), but not the path. 
 So Hirschberg devised an algorithm using divide and conquer and dynamic programming to solve the issue.
 For computation i.e. YPrefix and YSuffix as mentioned abovw, we have a 2-D array of n+1 rows and 2 cols, and to store the final optimal alignment, we require O(m+n) space. Time complexity of the efficient algo is O(mn) , similar to the basic algorithm.
 
 
 #################################### ANALYSIS OF PLOTTED GRAPHS ####################################
 
***************PROBLEM SIZE VS TIME ****************

We can see from the CPUPlot.png i.e. Problem size Vs Time, that for both algorithms, the time taken increases as the problem size increases. The time complexity for both basic and efficient algorithms is O(mn).
As problem size grows beyond length of 1024, the efficient algorithm takes few more milliseconds. ( from the data collected , its approximately 20-30ms). This could be because of the various String operations done in efficient algorithm (finding substring, string concat)).

***************PROBLEM SIZE VS MEMORY ***************
When the problem size is small ie. below 462, it is clearly seen in MemoryPlot.png that, there is no much difference in the memory consumed. However, as the problem size increases (in our case, beyond problem size of 512), we can see that the memory used in case of basic algorithm is significantly higher than that of the efficient algorithm. There is a steep increase in memory used for basic algorithm as problem size increases.








